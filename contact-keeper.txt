1. Setup MongoDB Atlas

2. Create a new folder and open it with VS Code

3. run: $ npm init

4. dependencies:
     A. $ npm install express
     B. $ npm install bcryptjs           //pass hashing
     C. $ npm install jsonwebtoken    //authentication
     D. $ npm install config            //for global variables
     e. $ npm install express-validator //validates any data coming in.
     F. $ npm install mongoose   //MongoDB extractor

5. Dev dependencies:
     A. $ npm install -D nodemon
     B. $ npm install -D concurrently  //run our back in the frontend react server.

6. Create a a new file server.js
 inside server.js:

const express = require("express");
const app = express();

const PORT = process.env.PORT || 5000;

app.listen(PORT, () => console.log(`Server up and running on PORT ${PORT}`));

then run: $ npm run server


config folder
inside:
     - default.json    a file for global variables. Its part of config package
     we installed at the begining.
     default.json contains the MongoDB URI link from the project cluster.

     -db.js  this is the file where we connect Mongoose to our DB.


//Promises:

// const connectDB = () => {
//      mongoose.connect(db, {
//           useNewUrlParser: true,
//           useCreateIndex: true,
//           useFindAndModify: false,
//           useUnifiedTopology: true
//      })
//      .then(() => console.log("MongoDB is connected!"))
//      .catch(err => {
//           console.log(err.message);
//           process.exit(1);
//      });
// };


models
User.js
Add User.js to routes/users

User registeration in Node.js:

1. creating u user register route in users.js:

const express = require("express");
const router = express.Router;
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const { check, validationResult} = require("express-validator");
const config = require("config");
const User = require("../models/User");

router.post("/", [

2. To include Express-Validator in the user register route:

     check("name", "Error msg")
          .not()
          .isEmpty(),
     check("email, "Error Msg")
          .isEmail(),
     check("password", "Error Msg")
          .isLength({ min: 6, max: 15})
     ], 
     async (req, res) => {

          const errors =  validationResult(req);
          if(!errors.isEmpty()){
               return res.status(400).json({ errors: errors.array() });
          }
          const {name, email, password } = req.body;
          
          try {

               let user =  await user.findOne({ email: email });
               if(user) {
                    res.status(400).json("User already exists");
               }
               user = new User({
                    name: name,
                    email: email,
                    password: password
               })
3. Hash/incrypt the user password:
               const salt = await bcrypt.getSalt(10);
               user.password = await bcrypt.hash(password, salt);

               user.save()

4. To include JWT in the user register route:
               payload: {
                    id: user.id
               }
               jwt.sign(
                    payload,
                    config.get("jwtSecret"),
                    {
                         expiresIn: 3600
                    },  
                    (err, token) => {
                         if(err) throw err;
                         res.json({ token })
                    }
               )
          }
          catch (error){
               console.log(error.message)
               res.status(500).json("Error registering user!");
          }
});

module.exports = router;




Express-validator is a tool to make sure certain things are sent.

Add this line to /routesusers.js:


Jason Web Token  (JWT)

What is JSON Web Token?
JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA or ECDSA.
r
$ npm install jsonwebtoken

in users.js

const jwt = require("jsonwebtoken");

 //JWT creating payload (object being sent in the token)

const payload = {
     id: user.id
}
jwt.sign(
     payload,
     config.get("jwtSecret"),
     {
          expiresIn:  3600
     },
     (error, token) => {
          if(error) throw error;
          res.js({ token });
     }
)

Building the Front-End:

A. Install React
B. Install concurrently
     concurrently gives us the ability to run more than 1 terminal in the same time.

     In package.json in the backend project folder:
     under scripts:
     scripts: {
          "server": "nodemon server.js",
          client: "npm start --prefix client",
          "clientinstall": "npm install --prefix client",
          "dev": "concurrently \"npm run server\" \"npm run client\""
     }
C. In package.json in the frontend project folder (client):
At the bottom add:
{
     "proxy": "http://localhost:5000"
}

D. At last, in the project terminal, run:  $npm run dev

In /client folder, we need to install the following dependencies:
$ npm install axios
$ npm install react-router-dom
$ npm install uuid                          // ID generator
$ npm install react-transition-group       //Animator


Inside /client/  folder:

1. Setup Context
     /components/context/
     types.js
     contactContext.js
     ContactState.js
     contactReducer.js

2. create a /components/Contact folder
     Contacts.jsx
     ContactsItems.jsx
     Contactsform.jsx

3. import Contacts.jsx in Home.jsx


